---
- name: Check for existing dotfiles
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/{{ item }}"
  register: dotfiles_status
  loop: "{{ dotfiles_list }}"
  tags: setup

- name: Check if dotfiles are managed by Ansible
  ansible.builtin.slurp:
    src: "{{ ansible_env.HOME }}/{{ item.item }}"
  register: file_contents
  loop: "{{ dotfiles_status.results }}"
  when: item.stat.exists
  tags: setup

- name: Set is_managed flag for each dotfile
  ansible.builtin.set_fact:
    dotfiles_status: "{{ dotfiles_status.results | zip(file_contents.results) | map('combine') | list }}"
  tags: setup

- name: Rename existing dotfiles to _legacy
  ansible.builtin.command:
    cmd: "mv {{ item.stat.path }} {{ item.stat.path }}_legacy"
  when: "item.stat.exists and not ('# BEGIN Managed by Ansible - Do not modify this line' in (item.content | b64decode))"
  loop: "{{ dotfiles_status }}"
  tags: setup

- name: Create new dotfiles that source the _legacy files
  ansible.builtin.blockinfile:
    path: "{{ item.stat.path }}"
    create: yes
    block: "source {{ ansible_env.HOME }}/{{ item.stat.path }}_legacy"
    marker: "# {mark} Managed by Ansible - Do not modify this line"
  when: "item.stat.exists and not ('# BEGIN Managed by Ansible - Do not modify this line' in (item.content | b64decode))"
  loop: "{{ dotfiles_status }}"
  tags: setup
