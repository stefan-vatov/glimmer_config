---
- name: Check for existing dotfiles
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/{{ item }}"
  register: dotfiles_status
  loop: "{{ dotfiles_list }}"
  tags: setup

- name: Check if dotfiles are managed by Ansible
  ansible.builtin.slurp:
    src: "{{ ansible_env.HOME }}/{{ item.item }}"
  register: dotfiles_file_contents
  loop: "{{ dotfiles_status.results }}"
  when: item.stat.exists
  tags: setup

- name: Set is_managed flag for each dotfile
  ansible.builtin.set_fact:
    dotfiles_status: "{{ dotfiles_status.results | zip(dotfiles_file_contents.results) | map('combine') | list }}"
  tags: setup

- name: Copy existing dotfiles to _legacy
  ansible.builtin.copy:
    src: "{{ item.stat.path }}"
    dest: "{{ item.stat.path }}_legacy"
    mode: "0600"
    remote_src: true
    force: false
  when: item.stat.exists and not ('# BEGIN Legacy config - Managed by Ansible - Do not modify this line' in (item.content | b64decode))
  loop: "{{ dotfiles_status }}"
  tags: setup

- name: Remove original dotfiles after renaming
  ansible.builtin.file:
    path: "{{ item.stat.path }}"
    state: absent
  when: item.stat.exists and not ('# BEGIN Legacy config - Managed by Ansible - Do not modify this line' in (item.content | b64decode))
  loop: "{{ dotfiles_status }}"
  tags: setup
