---
- name: Check for existing dotfiles
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/{{ item }}"
  register: dotfiles_dotfiles_status
  loop: "{{ dotfiles_list }}"
  tags:
    - revert_dotfiles

- name: Check if dotfiles are managed by Ansible
  ansible.builtin.slurp:
    src: "{{ ansible_env.HOME }}/{{ item.item }}"
  register: dotfiles_managed_file_contents
  loop: "{{ dotfiles_dotfiles_status.results }}"
  when: item.stat.exists
  tags: revert_dotfiles

- name: Set is_managed flag for each dotfile
  ansible.builtin.set_fact:
    dotfiles_dotfiles_status: "{{ dotfiles_dotfiles_status.results | zip(dotfiles_managed_file_contents.results) | map('combine') | list }}"
  tags: revert_dotfiles

- name: Remove managed dotfiles
  ansible.builtin.file:
    path: "{{ item.stat.path }}"
    state: absent
  when: item.stat.exists and ('# BEGIN Legacy config - Managed by Ansible - Do not modify this line' in (item.content | b64decode) or '# BEGIN SV config - Managed by Ansible - Do
    not modify this line' in (item.content | b64decode))
  loop: "{{ dotfiles_dotfiles_status }}"
  tags:
    - revert_dotfiles

- name: Unstow dotfiles
  ansible.builtin.command:
    cmd: stow -t {{ ansible_env.HOME }} -d {{ ansible_env.HOME }}/.dotfiles/sv -D . --ignore='.DS_Store'
    chdir: "{{ ansible_env.HOME }}"
  args:
    chdir: "{{ ansible_env.HOME }}"
  register: dotfiles_unstow_result
  failed_when: dotfiles_unstow_result.rc not in [0, 1, 13]
  when: not ansible_check_mode
  tags:
    - revert_dotfiles
    - skip_ansible_lint

- name: Find all _sv files in the home folder
  ansible.builtin.find:
    paths: "{{ ansible_env.HOME }}"
    patterns: .*_sv
    file_type: any
    hidden: true
  register: dotfiles_sv_files_result
  tags:
    - revert_dotfiles

- name: Remove _sv files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ dotfiles_sv_files_result.files }}"
  tags:
    - revert_dotfiles

- name: Remove dotfiles directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.dotfiles/sv"
    state: absent
  tags:
    - revert_dotfiles

- name: Find all _legacy files in the home folder
  ansible.builtin.shell: find {{ ansible_env.HOME }} -maxdepth 1 -type f -name '*_legacy'
  register: dotfiles_legacy_files_result
  tags:
    - revert_dotfiles
    - skip_ansible_lint

- name: Rename _legacy files by removing the _legacy part
  ansible.builtin.command:
    cmd: mv {{ item }} {{ item | regex_replace('_legacy', '') }}
  loop: "{{ dotfiles_legacy_files_result.stdout_lines }}"
  when: not ansible_check_mode
  tags:
    - revert_dotfiles
    - skip_ansible_lint
